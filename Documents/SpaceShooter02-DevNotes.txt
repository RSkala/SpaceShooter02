==============================================
SpaceShooter02 - Dev Notes
==============================================

Unreal Engine 5 project based on:
https://github.com/RSkala/SpaceShooter01
* Twin Stick shooter built in Unity C#

==============================================
Source Assets:

Space Shooter Asset Pack by Gustavo Vituri
https://gvituri.itch.io/space-shooter

Location in Project:
* Assets-Source/SpaceShooterAssets

==============================================
Asset Naming Convention References:
* https://dev.epicgames.com/documentation/en-us/unreal-engine/recommended-asset-naming-conventions-in-unreal-engine-projects
* https://unrealdirective.com/resources/asset-naming-conventions
* https://github.com/Allar/ue5-style-guide

Texture: T_ or T2D_  -- Note: I usually leave the Texture the same as the imported asset
Sprite: SPR_

==============================================
Pixels Per Unit

* Project Settings -> Editor -> Paper2D - Import -> Default Pixels Per Unreal Unit

I selected 0.08PPU for this project.

My reasoning for this is as follows:
* The asset pack I am using has the standard sprite size of 8x8.
* 1 Unreal Unit = 100cm (0.0328ft) 
* 100 Unreal Units = 100cm = 1m (3.328ft)
* I prefer to have my 2D pixel art characters to be 1m = 100cm = 100UU
* In general, it is a good idea to have decently-sized pixel art characters, as the CharacterMovementComponent expects the character to be "reasonable" height (i.e. human-sized)
* Note: I likely will not be using Characters or CharacterMovementComponent in this project, but I wanted to define a "standard" PPU.

Formula for Calculating PPU:
* Base-Character-Pixel-Height / 100
  * Using 100 for 100UU or 100cm or 1m

PPU Calculation for Project:
* Base Character Size:    8x8 pixels
* Base Character Height:  8px
* 8px / 100cm = 0.08px/cm = 0.08px/UU
* 0.08 PPU

This means that a character with a height of 8 pixels will have a height of 100m or 1m.

==============================================
Project Settings for 2D Pixel Art

Project Settings -> Engine -> Rendering -> Default Settings:
* Bloom: OFF
* Auto Exposure: OFF
* Auto Exposure: Manual
* Auto Exposure Bias: 0.0
* Motion Blur: OFF
* Anti-Aliasing Method: None

==============================================
Post Process Settings

The Post Process settings are set up in a PostProcessVolume in your Level.

Reason this needs to be done:
* A level has its own "hidden" PostProcessVolume with these settings enabled and set to some value by default. Creating your own PostProcessVolume in a Level will override these "hidden" default PostProcessVolume settings. Unreal still applies default post process settings that MUST be manually disabled in a level PostProcessVolume


Add a PostProcessVolume to Your Game Map:
* Quick Add -> Visual Effects -> PostProcessVolume
  * Set Transform Location to (0,0,0), although this really shouldn't matter
    * Note: The position shouldn't really matter, so long Infinite Extent (Unbound) is set to TRUE

Settings in PostProcesVolume's Details Panel:

* Post Process Volume Settings -> Infinite Extent (Unbound): TRUE
  * This means the setting will be applied no matter where the camera is. If unchecked, will only apply when camera is inside the box.

* Lens -> Bloom -> Threshold: TRUE, set to 1.0
  * This limits the glowing effect around bright elements

* Lens -> Exposure -> Exposure Compensation: TRUE, set to 0.0
  * Removes the slightly brightened and corrected effect

* Lens -> Exposure -> MinEV100: TRUE, set to 0.0
* Lens -> Exposure -> MaxEV100: TRUE, set to 0.0
  * These specify the auto-exposure effect range. Auto-Exposure can and should be disabled in Project Settings -> Engine -> Rendering -> Default Settings
  * When Auto-Exposure is disabled, these should have no effect, but we should still disable them just in case.

* Lens -> Image Effects -> Vignette Intensity: TRUE, set to 0.0
  * This eliminates the elements that make the edges of the screen slightly darker

* Color Grading -> Misc -> Expand Gamut: TRUE, set to 0.0
* Color Grading -> Misc -> Tone Curve Amount: TRUE, set to 0.0
  * These two settings make the sprites much brighter than they are supposed to be and therefore should be set to 0

==============================================
Texture Settings for 2D Pixel Art

Default way of applying Texture Settings for 2D:
* Right-click Texture -> Sprite Actions -> Apply Paper2D Texture Settings
  * Note that this only applies the settings in the Paper2D Import project settings, and therefore not all of the settings below will be set.

While Texture asset is open, in Details, ensure the following settings are set:

* Level of Detail -> Mip Gen Settings: NoMipMaps
* Level of Detail -> Texture Group: 2D Pixels (unfiltered)
* Compression -> Compression Settings: UserInterface2D (RGBA)
* Texture -> sRGB: True
* Texture -> Advanced -> Filter: Nearest

-------
NOTE:
* This can be changed using a "Scripted Asset Actions" tool, so you don't have to do all of the above manually every single time.
* Source:
  * https://www.youtube.com/watch?v=_sgyZ2dsUV0

==============================================
Editor Viewport Settings

* Upper-left of Viewport -> Viewport Options -> 
  * Realtime:  FALSE

* Projection Settings:
  * Right (Orthographic, looking down the "Right" / Y axis towards the origin)
    * This means our game will be played in the XZ plane (X-right, Z-up)

* View Mode:
  * Unlit

==============================================
